<project name="Solid Build" default="build">
    <property name="configuration" value="release"/>
    
    <target name="clean" description="Delete all previously compiled binaries.">
        <delete>
            <fileset>
                <include name="**/bin/**" />
                <include name="**/obj/**" />
                <include name="../output/**" />
                <include name="../release/output/*" />
            </fileset>
        </delete>
    </target>
    
	<target name="revision"> 
	    <property name="svn.info.log" value="svninfo.txt"/>
		<exec
			program="svn.exe"
			basedir="C:\Program Files\Subversion\bin"
			commandline="info svn://projects.mseag.org/projects.mseag.org/solid/trunk --username bob --password bob23"
			output="${svn.info.log}"
		/>
		<loadfile property="svn.head.revision" file="${svn.info.log}" />
		<regex pattern="^Revision: (?'revision'.*)$" input="${svn.head.revision}" options="Multiline" />
		<echo message="Revision: ${revision}" />
		<delete file="${svn.info.log}" />
	</target>
	
	<target name="version" depends="revision">
		<loadfile property="version" file="version.txt">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<property name="version" value="${string::trim(version)}" />
		<echo message="Version: ${version}" />
	</target>

	<target name="assemblyinfo" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../src/**/AssemblyInfo.cs" />
				</items>
			</in>
			<do>
				<script language="C#">
				<code><![CDATA[
				public static void ScriptMain(Project project)
				{
					StreamReader reader = new StreamReader(project.Properties["filename"]);
					string contents = reader.ReadToEnd();
					reader.Close();
					string replacement;
					string newText = contents;
					replacement = string.Format(
						"[assembly: AssemblyVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyVersion\("".*""\)\]", replacement);
					replacement = string.Format(
						"[assembly: AssemblyFileVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyFileVersion\("".*""\)\]", replacement);
					StreamWriter writer = new StreamWriter(project.Properties["filename"], false);
					writer.Write(newText);
					writer.Close();
				}
				]]>
				</code>
				</script>
    		</do>
		</foreach>
	</target>

    <target name="build" description="Build all targets.">
        <call target="build.solution"/>
    </target>
    
    <target name="rebuild" depends="clean, build" />

    <target name="build.solution" depends="assemblyinfo">
        <solution configuration="${configuration}" solutionfile="../src/solid.sln">
        </solution>
        <property name="expected.output" value="../output/${configuration}/Solid.exe"/>
        <fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
    </target>
    
    <target name="test" depends="build">
    	<nunit2>
    		<formatter type="Plain" usefile="true" />
    		<test>
    			<assemblies>
    				<include name="../output/${configuration}/*Tests.exe" />
    				<include name="../output/${configuration}/*Test.exe" />
    			</assemblies>
    		</test>    	
    	</nunit2>
    </target>
    
	<target name="installerpre" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../release/*.iss" />
				</items>
			</in>
			<do>
				<property name="backupname" value="${string::replace(filename, 'iss', 'iss.bak')}" />
				<copy file="${filename}" tofile="${backupname}" overwrite="true" />
				<copy file="${backupname}" tofile="${filename}" overwrite="true">
					<filterchain>
						<expandproperties />
					</filterchain>
				</copy>
    		</do>
		</foreach>
	</target>

	<target name="installerpost">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../release/*.iss" />
				</items>
			</in>
			<do>
				<property name="backupname" value="${string::replace(filename, 'iss', 'iss.bak')}" />
				<copy file="${backupname}" tofile="${filename}" overwrite="true" />
				<delete file="${backupname}" />
    		</do>
		</foreach>
	</target>

    <target name="installer.win">
    	<exec program="C:\Program Files\Inno Setup 5\ISCC.exe" append="true">
    		<arg file="../release/solid.iss" />
    	</exec>
    </target>
    
    <target name="installer" depends="test">
    	<call target="installerpre" />
    	<call target="installer.win" />
    	<call target="installerpost" />
    </target>

</project>
